using Test

@testset "Test set for Newton-CG" begin
	#Test problem:
	fH(x) = (x[2]+x[1].^2-11).^2+(x[1]+x[2].^2-7).^2
	x0H = [10., 20.]
	himmelblau = ADNLPModel(fH, x0H)

	problem2 = ADNLPModel(x->-x[1]^2, ones(3))

	roz(x) = 100 *  (x[2] - x[1]^2)^2 + (x[1] - 1.0)^2
	rosenbrock = ADNLPModel(roz, [-1.2, 1.0])

	f(x) = x[1]^2 * (2*x[1] - 3) - 6*x[1]*x[2] * (x[1] - x[2] - 1)
	pb_du_cours = ADNLPModel(f, [-1.001, -1.001]) #ou [1.5, .5] ou [.5, .5]

	################################## TEST NEWTON ########################
	#Unit/Validation Tests
	using Logging, Test
	stats = with_logger(NullLogger()) do 
	    armijo_Newton_cg(himmelblau) 
	end
	@test stats.status == :first_order
	@test stats.dual_feas ≤ 1e-6 + 1e-6 * norm(grad(himmelblau, himmelblau.meta.x0))
	@show (stats.status, stats.solution)
	stats = with_logger(NullLogger()) do 
	    armijo_Newton_cg(problem2) 
	end
	@test stats.status == :unbounded
	@show (stats.status, stats.solution)
	stats = with_logger(NullLogger()) do 
	    armijo_Newton_cg(rosenbrock) 
	end
	@test stats.solution ≈ [1., 1.] atol = 1e-5
	@show (stats.status, stats.solution)
	stats = with_logger(NullLogger()) do 
	    armijo_Newton_cg(pb_du_cours, x = [-1.001, -1.001]) 
	end
	@test stats.status == :unbounded
	@show (stats.status, stats.solution)
	stats = with_logger(NullLogger()) do 
	    armijo_Newton_cg(pb_du_cours, x = [1.5, .5]) 
	end
	@test stats.status == :first_order
	@test stats.solution ≈ [1., 0.] atol = 1e-6
	@show (stats.status, stats.solution)
	stats = with_logger(NullLogger()) do 
	    armijo_Newton_cg(pb_du_cours, x = [.5, .5]) 
	end
	@test stats.status == :first_order
	@test stats.solution ≈ [1., 0.] atol = 1e-6
	@show (stats.status, stats.solution)
end
